# -*- coding: utf-8 -*-
from __future__ import print_function
import httplib2
import os
import sys
import errno
import io

from apiclient import discovery
from oauth2client import client
from oauth2client import tools
from oauth2client.file import Storage
from apiclient.http import MediaIoBaseDownload
from apiclient.http import MediaFileUpload



try:
    import argparse

    tools.argparser.add_argument('--path', default='./../myfifo', help='pipe path')
    flags = argparse.ArgumentParser(parents=[tools.argparser]).parse_args()
    

except ImportError:
    flags = None

PIPE_PATH = ''
uploaded_file_path = ''
real_file_id = ''

try:
    import argparse

    tools.argparser.add_argument('--fid', default='-1', help='real file_id')
    tools.argparser.add_argument('--fpath', default='-1', help='uploaded file_path')
    tools.argparser.add_argument('--fifo_path', default='./../myfifo', help='pipe path')

    flags = argparse.ArgumentParser(parents=[tools.argparser]).parse_args()

    if flags.id:
        real_file_id = flags.id

    if flags.fpath:
        uploaded_file_path = flags.fpath

    if flags.path:
        PIPE_PATH = flags.path


except ImportError:
    flags = None

reload(sys)
sys.setdefaultencoding('utf-8')

# If modifying these scopes, delete your previously saved credentials
# at ~/.credentials/drive-python-quickstart.json
# 접근 권한: https://developers.google.com/drive/v2/web/about-auth
SCOPES = 'https://www.googleapis.com/auth/drive' # all permision

CLIENT_SECRET_FILE = 'client_secret.json'
APPLICATION_NAME = 'Drive API Python Quickstart'
FOLDER_TYPE = "application/vnd.google-apps.folder"  # 구글 드라이브 API에선 타입이 이 스트링인 파일을 폴더로 인식함
ROOT_FOLDER = "cloud_usb_test"  # 테스트를 위한 최상위 폴더


def get_credentials():
    home_dir = os.path.expanduser('~')
    credential_dir = os.path.join(home_dir, '.credentials')
    if not os.path.exists(credential_dir):
        os.makedirs(credential_dir)
    credential_path = os.path.join(credential_dir,
                                   'drive-python-quickstart.json')

    store = Storage(credential_path)
    credentials = store.get()
    if not credentials or credentials.invalid:
        flow = client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)
        flow.user_agent = APPLICATION_NAME
        if flags:
            credentials = tools.run_flow(flow, store, flags)
        else:  # Needed only for compatibility with Python 2.6
            credentials = tools.run(flow, store)
        print('Storing credentials to ' + credential_path)
    return credentials


def main():
    # 구글 계정 권한 얻기
    credentials = get_credentials()
    http = credentials.authorize(httplib2.Http())
    service = discovery.build('drive', 'v3', http=http)

    # 1. ROOT_DIRECTORY 이름을 가진 최상위 폴더를 찾음
    first_folder = service.files().list(
        q=("mimeType = '%s' and name = '%s'" %(FOLDER_TYPE, ROOT_FOLDER))).execute()
    first_folder_item = first_folder.get('files', [])
    root_dir_id = 0
    if not first_folder_item:
        print('No %s found.' % ROOT_FOLDER)
    else:
        for item in first_folder_item:
            root_dir_id = item['id']

    upload_request(service, "0B8CPvjgKUMvtaVpOWExmQ084LXc", "FOLDER_TEST", FOLDER_TYPE)
    #file_upload(service, root_dir_id, real_file_path, uploaded_file_path)

    # 파일, 디렉토리 정보를 파일에 저장
    bridge = open(PIPE_PATH, "w")
    try:
        for file in result_files:
            bridge.write(file + "\n")
    finally:
        bridge.close()

def upload_to_google_drive(service, root_dir_id, file_path, uploaded_file_path):

    ## Param: uploaded_file_path
    ## ex) /folder1/folder2/folder3/aaa.txt

    ## 1. 폴더패스, 파일이름 분리
    ## ex) /folder1/folder2/folder3 AND aaa.txt
    splited_path = uploaded_file_path.rsplit("/", 1)

    directory_path = splited_path[0] # /aaa.txt이면 ""임
    uploaded_file_name = splited_path[1]
    

    ## 2. 이미 폴더가 있는지 "myfifo" 탐색
    ##  뒤에서부터 잘라가면서 해당 폴더가 있는지 확인한다.
    ##  없는 폴더를 찾으면 거기서부터 역순으로 만들어 나감

    ## ex) "myfifo"에 /folder1/ 가 이미 있는 경우
    ##  /folder1/folder2/folder3 exist? NO
    ##  /folder1/folder2 exist? NO
    ##  /folder1 exist? YES
    ##  make /folder1/folder2
    ##  make /folder1/folder2/folder3
    
    depth = 0
    parent = root_dir_id
    no_exist_folers = ""

    # 없애나가는 과정
    while(directory_path):
        ret = is_exist(directory_path)
        if(ret):
            parent = ret
            break;
        temp = directory_path.rsplit("/", 1)
        directory_path = temp[0]
        no_exist_folers = temp[1] + "/" + no_exist_folers 
        depth += 1

    while(depth):
        upload_folder(service, parent, )

        depth -= 1




    ## 3. 파일 업로드
    ##  upload /folder1/folder2/folder3/aaa.txt

    real_file_path = ".../download/" + real_file_id
    create_file(service, parent, uploaded_file_name, real_file_path)


def upload_folder(service, parent, file_name):
    file_metadata = {
    'name' : file_name,
    'parents' : [parent],
    'mimeType' : ROOT_FOLDER }

    #media = MediaFileUpload('photo.jpg', mimetype='image/jpeg')

    file = service.files().create(body=file_metadata,
                                        fields='id').execute()
    print('Folder Upload Success: %s' % file.get('id'))

def create_file(service, parent, file_name, real_file_path):
    file_metadata = {
    'name' : file_name,
    'parents' : [parent] }

    media = MediaFileUpload(real_file_path)
    #media = MediaFileUpload('photo.jpg', mimetype='image/jpeg')

    file = service.files().create(body=file_metadata,
                                        media_body=media,
                                        fields='id').execute()
    print('File Upload Success: %s' % file.get('id'))


if __name__ == '__main__':
    main()
